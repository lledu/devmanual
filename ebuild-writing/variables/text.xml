<?xml version="1.0"?>
<guide self="ebuild-writing/variables/">
<chapter>
<title>变量</title>

<body>
<p>
	在ebuilds中有很多特别的变量需要设置，有很多变量的设置是可选的，也有一些需要提前设置，以便在ebuild中引用.
</p>
</body>

<section>
<title>预先定义的只读变量</title>
<body>

<p>
以下变量名称是默认系统设定好的，请勿试图再次定义类似变量。
</p>

<table>
  <tr>
    <th>变量</th>
    <th>意义</th>
  </tr>
  <tr>
    <ti><c>P</c></ti>
    <ti>软件包名称和版本 (不含任何再版), 如 <c>vim-6.3</c>.</ti>
  </tr>
  <tr>
    <ti><c>PN</c></ti>
    <ti>软件包名称，如 <c>vim</c>.</ti>
  </tr>
  <tr>
    <ti><c>PV</c></ti>
    <ti>软件包版本 (不含任何再版), 如 <c>6.3</c>. 它应反映出上游版本的方案.</ti>
  </tr>
  <tr>
    <ti><c>PR</c></ti>
	<ti>软件包版本, 若不存在再版就用 <c>r0</c> .</ti>
  </tr>
  <tr>
    <ti><c>PVR</c></ti>
    <ti>软件包版本和再版 , 如 <c>6.3</c>, <c>6.3-r1</c>.</ti>
  </tr>
  <tr>
    <ti><c>PF</c></ti>
    <ti>软件包全名, 相当于<c>${PN}-${PVR}</c>, 如 <c>vim-6.3-r1</c>.</ti>
  </tr>
  <tr>
    <ti><c>A</c></ti>
    <ti>
      软件包的所有源文件 (不含因 <c>USE</c> 标记使其不可用的).
    </ti>
  </tr>
  <tr>
    <ti><c>CATEGORY</c></ti>
    <ti>软件包所属目录, 如 <c>app-editors</c>.</ti>
  </tr>
  <tr>
    <ti><c>FILESDIR</c></ti>
    <ti>
      ebuild's  <c>files/</c> 文件目录(常放置较小的补丁文件等)的路径. 值为:
      <c>"${PORTDIR}/${CATEGORY}/${PN}/files"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>WORKDIR</c></ti>
    <ti>
      系统处理 ebuild's 文件时所在的工作目录的路径. 值为:
      <c>"${PORTAGE_BUILDDIR}/work"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>T</c></ti>
    <ti>
       ebuild使用的临时文件的路径. 值为: <c>"${PORTAGE_BUILDDIR}/temp"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>D</c></ti>
    <ti>
      临时的安装目录路径. 值为:
      <c>"${PORTAGE_BUILDDIR}/image"</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>ROOT</c></ti>
    <ti>
      当不使用 <c>${D}</c>,
      可以把它当成虚拟的 <c>${ROOT}</c> 文件夹.
    </ti>
  </tr>
  <tr>
    <ti><c>DISTDIR</c></ti>
    <ti>
      储存所有抓下来用以产生软件包的文件的 distfiles 目录. 一般来讲就是 /usr/portage/distfiles.
    </ti>
  </tr>
</table>

</body>
</section>

<section>
<title>定义Ebuild 的变量</title>
<body>

<p>
以下变量必须在每一个ebuild中设置.
</p>

<table>
  <tr>
    <th>变量</th>
    <th>意义</th>
  </tr>
  <tr>
    <ti><c>EAPI</c></ti>
    <ti>
    关于 EAPI规约. 相见 <uri link="::ebuild-writing/eapi"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>DESCRIPTION</c></ti>
    <ti>
    简短(少于 80 字符) 描述软件包的作用等.
    </ti>
  </tr>
  <tr>
    <ti><c>HOMEPAGE</c></ti>
    <ti>
		软件包的主页，如果没有办法找到官方网站，可以尝试去 <uri link="http://freshmeat.net">freshmeat.net </uri> 或类似的软件追踪网站来查找连接。其中不要包含变量，只能是原始文字。
    </ti>
  </tr>
  <tr>
    <ti><c>SRC_URI</c></ti>
    <ti>
    软件包所用的原始安装包文件的URL. 可以包含
    <c>USE</c>-条件部分, 详见
    <uri link="::ebuild-writing/variables#SRC_URI"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>LICENSE</c></ti>
    <ti>
    软件包的授权许可， 此栏必须设置成一个可用的授权，授权许可
	通常存储在 <c>"/usr/portage/licenses/"</c>文件夹中. 强制性的(虚拟的例外).
    详见 <uri link="::ebuild-writing/variables#LICENSE"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>SLOT</c></ti>
    <ti>
    软件包的 <c>SLOT</c>. 强制性的.
    详见 <uri link="::ebuild-writing/variables#SLOT"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>KEYWORDS</c></ti>
    <ti>
    详见 <uri link="::ebuild-writing/variables#KEYWORDS"/> and
    <uri link="::keywording/"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>IUSE</c></ti>
    <ti>
		设定成任何所有你的套件所用到的 USE 标示(不包括构架标示，但是包括 
		<c>USE_EXPAND </c> 标示) ，但是属于<c>KEYWORDS</c>的东西不应该列在此处. 详见
    <uri link="::ebuild-writing/variables#IUSE"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>RESTRICT</c></ti>
    <ti>
		和Portage FEATURESA相关，用来限制或去除ebuild中的某项特性.
    可用的值有 <c>fetch</c>, <c>mirror</c>, <c>strip</c>, <c>test</c> 和
    <c>userpriv</c>等. 详见 <c>man 5 ebuild</c>.
    </ti>
  </tr>
  <tr>
    <ti><c>DEPEND</c></ti>
    <ti>
    软件包构建时所需依赖.  见
    <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>RDEPEND</c></ti>
    <ti>
    软件包运行时所需要的依赖. 见
    <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>PDEPEND</c></ti>
    <ti>
    在软件包正常安装后继续安装的软件包列表。只能在 <c>RDEPEND</c> 不能使用的情况下使用. 见 <uri link="::general-concepts/dependencies"/>.
    </ti>
  </tr>
  <tr>
    <ti><c>S</c></ti>
    <ti>
    构建软件包的临时目录的路径，
    供<c>src_compile</c> 和 <c>src_install</c>使用. 默认在:
    <c>"${WORKDIR}/${P}"</c>. Portage默认为您设置成这个值，所以您大可不用改动它.
    </ti>
  </tr>
</table>

</body>
</section>

<section>
<title>SLOT 插槽</title>
<body>

<p>
不需要slots时, 将其设为 <c>SLOT="0"</c>.  <b>不要</b> 搞成 <c>SLOT=""</c>, 这样等于放弃使用软件包的slot功能.
</p>

<p>
	详见 <uri link="::general-concepts/slotting/" /> .
</p>

</body>
</section>

<section>
<title>KEYWORDS</title>
<body>

<p>
	在<c>KEYWORDS</c> 中唯一一个包含 <c>*</c>指代所有构架的结构是 <c>-*</c>.    <b>不要</b> 搞成 <c>KEYWORDS="*"</c> 或 <c>KEYWORDS="~*"</c>.
</p>

<p>
详见 <uri link="::keywording/"/> .
</p>

</body>
</section>

<section>
<title>SRC_URI</title>

<subsection>
<title>条件判断的URL地址</title>
<body>

<p>
条件判断的URL地址基于 USE 标示，使用 use <c>flag? ( )</c> 格式的语句. 基于不同构架的软件包常常这样设置 <d/> 可以节省带宽.
</p>

<codesample lang="ebuild">
SRC_URI="http://example.com/files/${P}-core.tar.bz2
    x86?   ( http://example.com/files/${P}/${P}-sse-asm.tar.bz2 )
    ppc?   ( http://example.com/files/${P}/${P}-vmx-asm.tar.bz2 )
    sparc? ( http://example.com/files/${P}/${P}-vis-asm.tar.bz2 )
    doc?   ( http://example.com/files/${P}/${P}-docs.tar.bz2 )"
</codesample>

<p>
	若用<c>USE_EXPAND</c> 变量判断与软件包相关的某个可选组件是否安装，最好就是安装完成所有可用的组件。
</p>

<codesample lang="ebuild">
SRC_URI="http://example.com/files/${P}-core.tar.bz2
        examplecards_foo?  ( http://example.com/files/${P}-foo.tar.bz2 )
        examplecards_bar?  ( http://example.com/files/${P}-bar.tar.bz2 )
        examplecards_baz?  ( http://example.com/files/${P}-baz.tar.bz2 )
        !examplecards_foo? ( !examplecards_bar? ( !examplecards_baz? (
            http://example.com/files/${P}-foo.tar.bz2
            http://example.com/files/${P}-bar.tar.bz2
            http://example.com/files/${P}-baz.tar.bz2 ) ) )"
</codesample>

</body>
</subsection>
</section>

<section>
<title>IUSE</title>
<body>

<p>
注意 <c>IUSE</c> 变量是交互式， so there is no need to specify
USE flags used only within inherited eclasses within the ebuild's IUSE.
</p>
<note>
如果软件包不需要IUSE 变量可以将其设置为空。
</note>

<p>
关于构架的USE 标示 (<c>sparc</c>, <c>mips</c>, <c>x86-fbsd</c> 等等) 不应该再次列出.
</p>

</body>
</section>

<section>
<title>LICENSE授权文件</title>
<body>

<p>
	可以使用多个 <c>LICENSE</c> ，只有 <c>USE</c> 标示开启的时候相应的授权许可生效. 它的格式如同 <c>DEPEND</c>变量. 详见 <uri link="http://www.gentoo.org/proj/en/glep/glep-0023.html">
GLEP 23</uri> .
</p>

</body>
</section>

<section>
<title>版本和命名格式</title>
<body>

<p>
通常上游软件包的版本及命名格式和 Gentoo 所期望的会有不一致。字母大小写及下划线和连字符等在命名中的不一致是非常常见的。如, gentoo更希望叫 <c>foo-1.2.3b</c> 为 <c>Foo-1.2-3b.tar.bz2</c>. 与硬生生修改其软件包名称相比,Portage系统更推荐使用 <c>MY_PN</c>, <c>MY_PV</c> 和 <c>MY_P</c> 变量来定义上游软件包的名称。最简单的重命名版本的方法是调用 <c>versionator</c> eclass，否则后果自负哦:
</p>

<codesample lang="ebuild">
inherit versionator
MY_PN="Foo"
MY_PV=$(replace_version_separator 2 '-')
MY_P="${MY_PN}-${MY_PV}"
</codesample>

<p>
使用这段代码的优势在于即使是上游软件包的名字格式变为 <c>Foo-1.3-4.5.tar.bz2</c> 标准的格式，软件的构建工作依然能顺利进行(牛掰吧，这就是gentoo).
</p>

<p>
	当然也可以用 bash 脚本替代以达同样的目的 (这就是versionator eclassh内部工作机制), 但这实现起来可能复杂而且更容易出错，可读性差。
</p>

<p>
一些ebuilds 试图调用 <c>sed</c>, <c>awk</c> 和/或 <c>cut</c> . 我们在此 <e>绝不</e> 推荐和允许这样做, 要么用 versionator ，要么必要时用bash。 全局中不用bash代码也是不现实的。
</p>

<p>
 <c>versionator</c> eclass 也可以用来从文件名称中解出某个特定值（或者说是参数）. 详见 <c>man versionator.eclass</c> 和其相关源代码及相关示例。。函数的大概功能如下。
</p>

<table>
  <tr>
    <th>函数</th>
    <th>意义</th>
  </tr>
  <tr>
    <ti><c>get_all_version_components</c></ti>
    <ti>将版本字串划分为各自的小单元.</ti>
  </tr>
  <tr>
    <ti><c>get_version_components</c></ti>
    <ti>获取主要的版本单元, 除外 '.', '-' 和 '_'.</ti>
  </tr>
  <tr>
    <ti><c>get_major_version</c></ti>
    <ti>获取主版本.</ti>
  </tr>
  <tr>
    <ti><c>get_version_component_range</c></ti>
    <ti>从版本字串中解出一系列亚单元.</ti>
  </tr>
  <tr>
    <ti><c>get_after_major_version</c></ti>
    <ti>获取主版本后的所有部分.</ti>
  </tr>
  <tr>
    <ti><c>replace_version_separator</c></ti>
    <ti>替换某个分割符.</ti>
  </tr>
  <tr>
    <ti><c>replace_all_version_separators</c></ti>
    <ti>替换所有的版本分割符.</ti>
  </tr>
  <tr>
    <ti><c>delete_version_separator</c></ti>
    <ti>删除一个版本分割符.</ti>
  </tr>
  <tr>
    <ti><c>delete_all_version_separators</c></ti>
    <ti>删除所有的版本分割符.</ti>
  </tr>
</table>

</body>
</section>

</chapter>
</guide>
