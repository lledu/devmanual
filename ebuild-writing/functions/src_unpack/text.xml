<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_unpack/">
<chapter>
<title>函数src_unpack</title>

<body>
<table>
  <tr>
    <th>函数名</th>
    <ti><c>src_unpack</c></ti>
  </tr>
  <tr>
    <th>意义</th>
    <ti>将源码包(其他的压缩包)解压，打各种补丁或小修正</ti>
  </tr>
  <tr>
    <th>Sandbox</th>
    <ti>开启</ti>
  </tr>
  <tr>
    <th>所需权限</th>
    <ti>user</ti>
  </tr>
  <tr>
    <th>被谁调用</th>
    <ti>ebuild</ti>
  </tr>
</table>
</body>

<section>
<title>默认的<c>src_unpack</c></title>
<body>
<codesample lang="ebuild">
src_unpack() {
    if [ "${A}" != "" ]; then
        unpack ${A}
    fi
}
</codesample>
</body>
</section>

<section>
<title>实例<c>src_unpack</c></title>
<body>
<codesample lang="ebuild">
src_unpack() {
    unpack ${A}
    cd "${S}"

    epatch "${FILESDIR}/${PV}/${P}-fix-bogosity.patch"
    use pam &amp;&amp; epatch "${FILESDIR}/${PV}/${P}-pam.patch"

    sed -i -e 's/"ispell"/"aspell"/' src/defaults.h || die "Sed failed!"
}
</codesample>
<note>
当包含的EAPI >=2时, 必须使用函数<uri link="::ebuild-writing/functions/src_prepare">src_prepare</uri>
来打补丁或替换部分源文件，不推荐使用src_unpack函数.
</note>

</body>
</section>

<section>
<title>解压各种压缩包</title>
<body>
<p>
函数<c>unpack</c> 用于解压各种包，压缩文件等等。
不建议用 <c>tar</c>, <c>gunzip</c> 等命令手动解压，哈哈。
</p>

<p>
变量<c>${A}</c>包含源自变量<c>SRC_URI</c>的所有元素,除外
一些些在<c>SRC_URI</c>中被基于USE条件表示排除掉的元素. 
如果多个包需要按一定的顺序解压缩，
不使用变量<c>${A}</c>将会简化工作.
</p>
</body>
</section>

<section>
<title>行动吧<c>src_unpack</c> </title>
<body>
<p>
以下各小节将涵盖在开发者撰写
<c>src_unpack</c>相关函数时，遇到的不同源头的软件包的处理问题.
</p>

<contentsTree/>
</body>
</section>

</chapter>

<include href="cvs-sources/"/>
<include href="svn-sources/"/>
<include href="tla-sources/"/>
<include href="rpm-sources/"/>
<include href="deb-sources/"/>
<include href="other-formats/"/>
</guide>
