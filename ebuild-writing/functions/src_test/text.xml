<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_test/">
<chapter>
<title>函数src_test</title>

<body>
<table>
  <tr>
    <th>函数名</th>
    <ti><c>src_test</c></ti>
  </tr>
  <tr>
    <th>意义</th>
    <ti>在安装之前运行test脚本</ti>
  </tr>
  <tr>
    <th>Sandbox</th>
    <ti>开启</ti>
  </tr>
  <tr>
    <th>所需权限</th>
    <ti>user</ti>
  </tr>
  <tr>
    <th>被谁调用</th>
    <ti>ebuild</ti>
  </tr>
</table>
</body>

<section>
<title>默认的 <c>src_test</c></title>
<body>
<p> From sys-apps/portage-2.1.2.9 </p>
<codesample lang="ebuild">
src_test() {
	if emake -j1 check -n &amp;> /dev/null; then
		vecho ">>> Test phase [check]: ${CATEGORY}/${PF}"
		if ! emake -j1 check; then
			hasq test $FEATURES &amp;&amp; die "Make check failed. See above for details."
			hasq test $FEATURES || eerror "Make check failed. See above for details."
		fi
	elif emake -j1 test -n &amp;> /dev/null; then
		vecho ">>> Test phase [test]: ${CATEGORY}/${PF}"
		if ! emake -j1 test; then
			hasq test $FEATURES &amp;&amp; die "Make test failed. See above for details."
			hasq test $FEATURES || eerror "Make test failed. See above for details."
		fi
	else
		vecho ">>> Test phase [none]: ${CATEGORY}/${PF}"
	fi
}
</codesample>
</body>
</section>

<section>
<title>实例<c>src_test</c></title>
<body>
<codesample lang="ebuild">
src_test() {
    cd "${S}"/src/testdir

    # Test 49 won't work inside a portage environment
    sed -i -e 's~test49.out~~g' Makefile

    # Try to run the non-gui tests only
    make test-nongui \
            || die "At least one test failed"
}
</codesample>
</body>
</section>

<section>
<title>函数<c>src_test</c>通常运用</title>
<body>
<p>
一般而言，默认的<c>src_test</c>没有什么问题. 但有时
某些软件不能够在Portage的环境下运行时，就有必要略去相应的tests
. 具体要去除test的原因如下:
</p>

<ul>
  <li>需要X支持.</li>
  <li>
    需要运行被sandbox限制的相关文件.
  </li>
  <li>需要与用户的一些输入(src_test是不能够交互的).</li>
  <li>需要root权限.</li>
</ul>

<p>
通常,在<c>Makefile</c>中使用
<c>sed</c>命令去除相关的test就行，也可以直接跳过某个<c>make</c>目标.
</p>

<note>
注意不应该在函数<c>src_test</c>中使用<c>emake</c><d/>
并行的tests会导致各种各样奇怪的问题，除非<c>Makefile</c>
这样写是有其特殊的目的.
</note>

<p>
尽量保证您撰写的ebuilds能在正常的通过tests. 
一个好的测试单元对ebuilds的维护者而言极其重要.
</p>

</body>
</section>

<section>
<title>跳出Tests</title>
<body>
<p>
有时候完全跳出tests是有必要的，
可以如下简单的操纵<c>src_test</c>函数:
</p>

<codesample lang="ebuild">
src_test() {
    # Tests don't even remotely work inside portage
    true
}
</codesample>

<p>
另外的可行途径是在ebuild中开启<c>RESTRICT="test"</c> .
</p>

<note>
如果上游提供的test单元不能正常运行，请务必
向他们说明更正错误.包含谬误的测试比不测试更恐怖, 
因为我们不能从中分辨出是否是软件运行的错误.
</note>
</body>
</section>

</chapter>
</guide>
