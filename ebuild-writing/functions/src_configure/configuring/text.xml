<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_configure/configuring/">
<chapter>
<title>配置软件包</title>

<body>
<p>
很多软件包都是通过执行<c>./configure</c>脚本自动配置检测构建环境,可选的功能库支持.
Gentoo中<c>econf</c>函数也用异曲同工之妙<d/>Gentoo环境中它也能提供给软件正确的构建环境和自定义选项.
</p>

<p>
通常配置脚本将试图根据已经安装的软件自行开启某个可选功能的相关支持.这
是<b>不能</b>允许发生的.例如,如果用户安装了Perl但是默认USE标识为设置<c>USE="-perl"</c>,
那些拥有<e>Perl</e>可选项的软件包不应该链接到Perl.这些自动检测的结果会被<c>--enable-</c>和<c>--disable</c>或<c>--with-</c>和<c>--without-</c>开关重写(但请注意他们也许不能总能如您所愿<d/>请保证他们能正常测试!).
</p>

<p>
<c>use_enable</c>和<c>use_with</c>这些实用函数是用来开关软件包相关功能的,应当合理利用.
</p>

<codesample lang="ebuild">
src_configure() {
    # We have optional perl, python and ruby support
    econf \
        $(use_enable perl ) \
        $(use_enable python ) \
        $(use_enable ruby )
}

src_configure() {
    # Our package optional IPv6 support which uses --with rather than
    # --enable / --disable

    econf $(use_with ipv6 )
}
</codesample>

<p>
有时候软件包可选功能的名称与<c>USE</c>标示的名称会有出入.这就是<c>X</c>标示最常见应用的情景.此时,两种方式可供选择:
</p>

<codesample lang="ebuild">
src_configure() {
    # Our package has optional perl, python and ruby support
    econf \
        $(use_enable perl perlinterp ) \
        $(use_enable python pythoninterp ) \
        $(use_enable ruby rubyinterp )

    # ...
}

src_compile() {
    econf $(use_with X x11 )
}
</codesample>

<p>
如想要摒弃某项<c>USE</c>标示,可以采用<c>use_enable !flag</c>这样的形式.
</p>
</body>

</chapter>
</guide>
