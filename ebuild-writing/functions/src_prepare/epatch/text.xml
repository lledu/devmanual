<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_prepare/epatch/">
<chapter>
<title>使用epatch打补丁</title>

<body>
<p>
最常用的给软件打补丁用方法
在<c>src_prepare</c>区域中使用<c>epatch</c>(必须在inhert声明中添加<c>eutils.eclass</c>，这点很重要). 该函数会在必要时自动添加<c>-p</c>处理补丁文件,及<c>gunzip</c>等常见压缩包格式的修补文件. 
也请注意在旧的ebuilds文件中可能仍然在用src_unpack函数处理补丁. 
这是因为那些ebuilds文档是基于EAPI="1"的. 
建议在您将来的编写ebuilds文件是使用EAPI>="2"并且使用src_prepare函数处理相关补丁和修补.
</p>

<p>
注意<c>非常建议</c>您在撰写采用最原始的归档文件+相应的各个补丁文件，而不是使用默认发型版本+后续的补丁文件.
</p>
</body>

<section>
<title><c>epatch</c>的基本应用</title>
<body>

<p>
在最简单的应用形式中,在<c>epatch</c>后可以直接跟单个的文件名或
补丁文件.如果在打补丁的过程中出错它将调用<c>die</c>.
下例摘自<c>app-misc/detox</c>:
</p>

<codesample lang="ebuild">
src_unpack() {
    unpack ${A}
    cd "${S}"
    epatch "${FILESDIR}/${P}-destdir.patch"
    epatch "${FILESDIR}/${P}-parallel_build.patch"
}
</codesample>

<p>
对于较大型的补丁文件,使用<c>mirror://gentoo/</c>比只用
<c>files/</c>显得更合适.这时补丁的格式通常用<c>bzip2</c>压缩格式(相反
<c>files/</c>中的补丁,是不支持压缩格式的).见下例<c>app-admin/showconsole</c>:
</p>

<codesample lang="ebuild">
src_unpack() {
    unpack ${A}
    cd "${S}"
    epatch "${WORKDIR}/${P}-suse-update.patch.bz2"
    epatch "${FILESDIR}/${PV}-no-TIOCGDEV.patch"
}
</codesample>
<p>如之前所言,如果您采用的EAPI规约>=2,使用<uri link="::ebuild-writing/functions/src_prepare">src_prepare</uri>函数替代</p>
<codesample lang="ebuild">
src_prepare() {
	epatch "${WORKDIR}/${P}-suse-update.patch.bz2"
	epatch "${FILESDIR}/${PV}-no-TIOCGDEV.patch"
}
</codesample>

<p>
谨记在<c>SRC_URI</c>地址中添加补丁文件的路径.
</p>
</body>

<subsection>
<title>CVS关键行中的补丁修改</title>
<body>
<p>
如果您的补丁文件里任何CVS<c>$Id: $</c>
(或<c>$Header: $</c>,或<c>$Date: $</c>)行中有变化,它不能配置在<c>files/</c>中,
因为您一旦提交，CVS将破坏掉.
在这样的情况下，要么手动删除掉该补丁,要么重新镜像这个文件.
</p>
</body>
</subsection>

</section>

<section>
<title>使用<c>epatch</c>添加多有补丁</title>
<body>

<p>
<c>epatch</c>函数也能在一个目录中应用个补丁(也能基于不同构架选择不同补丁).这在上游软件发布多个补丁时能用的着.
</p>

<p>
例如:
</p>

<codesample lang="ebuild">
src_unpack() {
    unpack ${A}
    cd "${S}"
    EPATCH_SOURCE="${WORKDIR}/patches" EPATCH_SUFFIX="patch" \
        EPATCH_FORCE="yes" epatch
}
</codesample>

<p>
在这个例子中,<c>SRC_URI</c>的元素是一个归档文件，它是一系列以<c>.patch</c>为后缀明的补丁文件.
</p>

<p>
定义的变量如下:
</p>

<table>
  <tr>
    <th>变量名</th>
    <th>意义</th>
  </tr>
  <tr>
    <ti><c>EPATCH_SOURCE</c></ti>
    <ti>供epatch搜索补丁的具体的文件夹.</ti>
  </tr>
  <tr>
    <ti><c>EPATCH_SUFFIX</c></ti>
    <ti>补丁文件的扩展名.</ti>
  </tr>
  <tr>
    <ti><c>EPATCH_OPTS</c></ti>
    <ti><c>patch</c>的默认选项.</ti>
  </tr>
  <tr>
    <ti><c>EPATCH_EXCLUDE</c></ti>
    <ti>除外的不定的列表.</ti>
  </tr>
  <tr>
    <ti><c>EPATCH_FORCE</c></ti>
    <ti>
    强制epatch应用补丁即使是与常规的补丁名称格式不符(设成<c>yes</c>).
    </ti>
  </tr>
</table>

<p>
大部分的补丁文件应该采用
如<c>??_${ARCH}_foo.${EPATCH_SUFFIX}</c>这样的形式命名.如果名称不符合时,必须要设置<c>EPATCH_FORCE="yes"</c>.为<c>所有</c>的构架应用补丁时,注意设置<c>${ARCH}</c>部分.
</p>

</body>
</section>
</chapter>
</guide>
