<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_compile/building/">
<chapter>
<title>编译软件包</title>

<body>
<p>
<c>emake</c>函数用来调用系统中的<c>make</c>命令.当然用户正确设置<c>MAKEOPTS</c>很重要.该<c>emake</c> 函数将传递任意后续提供的参数,所以可以用来产生非默认的目标文件(<c>emake
extras</c>),例如.偶尔您可能遇到让人纠结的非自动处理(non-autotools)的
<c>Makefile</c>文件,让<c>emake</c>也一筹莫展,但这种情况应该很少见.
</p>

<p>
在编译时适当的在<c>MAKEOPTS</c>(make.conf文件中)设置<c>-j</c>并发进程数,这样可以保证多个进程编译.如果软件包<e>不支持</e>并行,应当给他打补丁.
</p>

<p>
如果<e>确定</e>不能够打这样的补丁,默认启用<c>emake -j1</c>.
然而这样做,特别是对于在很多非-x86的用户来说,编译软件可能真是会要命的<d/>强制在<c>-j1</c>的情况下,在MIPS和SPARC系统上编译时间可能增加几分钟到一个小时也说不定.
</p>
</body>

<section>
<title>微调编译选项</title>
<body>

<p>
有时软件包会用奇怪的编译器，或者需要用户指定一个需求的编译器.在这种情况下,应该使用<c>toolchain-funcs.eclass</c> 中的<c>tc-getCC()</c>函数.还有其他类似的函数可以用
<d/>更详细的内容可以<c>man toolchain-funcs.eclass</c>这样了解.
</p>

<note>
这个时候就<e>不应该</e>使用<c>${CC}</c>变量了.
</note>

<p>
有时软件包不遵循用户定义的<c>${CFLAGS}</c>或<c>${LDFLAGS}</c>.
这样的问题必须提前妥善处理,因为有时这些变量会被特定关键的ABI选项使用. 
这时编译的scripts应该适当修改(例如,使用<c>sed</c>)以便正确使用<c>${CFLAGS}</c>或<c>${LDFLAGS}</c>.
</p>

<codesample lang="ebuild">
inherit flag-o-matic toolchain-funcs

src_compile() {
    # -Os not happy
    replace-flags -Os -O2

    # We have a weird build.sh to work with which ignores our
    # compiler preferences. yay!
    sed -i -e "s:cc -O2:$(tc-getCC) ${CFLAGS} ${LDFLAGS}:" build.sh \
        || die "sed fix failed. Uh-oh..."
    ./build.sh || die "Build failed!"
}
</codesample>

<note>
当使用<c>sed</c>处理<c>CFLAGS</c>或<c>LDFLAGS</c>时,使用都好或斜线作为分隔符.推荐使用冒号.
</note>

<p>
Portage将执行QA检测,通过它来确认LDFLAGS是否.也只有当 <c>LDFLAGS</c>变量中包含<c>-Wl,--hash-style=gnu</c> 时,QA检测才会执行.
(这个标示只能用在使用<c>sys-libs/glibc</c>的系统上,MIPS的CPU也除外.)
</p>

</body>
</section>
</chapter>
</guide>
