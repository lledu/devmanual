<?xml version="1.0"?>
<guide self="ebuild-writing/functions/src_compile/build-environment/">
<chapter>
<title>配置编译环境</title>

<body>
<p>
有时需要在运行<c>./configure</c>之前,对用户编译环境中的某个方面更改. <c>flag-o-matic</c>
eclass这货是修改<c>CFLAGS</c>, <c>LDFLAGS</c>等等的不二之选.
</p>

<note>
除非特别的指明,一般情况下能使用
<c>CFLAGS</c>应该也能使用<c>CXXFLAGS</c>.
</note>

<p>
Ebuilds必须不能简单的忽略用户设定的CFLAGS, CXXFLAGS或LDFLAGS<d/>详见
<uri link="::general-concepts/user-environment#Not Filtering Variables"/>.
</p>
</body>

<section>
<title>标示过滤的简介</title>
<body>

<p>
如果软件包与任何合理的<c>CFLAGS</c>有冲突, 如果接受到bug报告,最好过滤出有问题的标示. 合理的<c>CFLAGS</c>是<c>-march=</c>, <c>-mcpu=</c>, <c>-mtune=</c> (依赖于系统构架), <c>-O2</c>, <c>-Os</c>和<c>-fomit-frame-pointer</c>. 注意最好使用<c>-O2</c>替代<c>-Os</c>，而不是完全启用-Os. 这个<c>-fstack-protector</c>标示应该也是这样的,尽管我们的团队中的强硬派声称这个标识不会引起冲突...
</p>

<p>
<c>-pipe</c>标示不会影响已经编译好的代码,所以在此它的关系并不大,但把它搞成全局设置不失为明智之举.
</p>

<p>
如果一个软件包与与其他(某个疯狂的)<c>CFLAGS</c>冲突,完全可以用标记<b>WONTFIX</b>的bug报告,并建议用户使用更多比较理性的全局<c>CFLAGS</c>.同样,如果你怀疑是某个较疯狂<c>CFLAGS</c>导致的bug,使用<b>INVALID</b>来解决问题也是可以的.
</p>

<p>
以下例子均假定在ebuild文档中<c>inherit flag-o-matic</c>已经合适的位置声明.
</p>

</body>
</section>

<section>
<title>简单标示剖析</title>
<body>

<p>
<c>filter-flags</c>函数用来从<c>CFLAGS</c>去除某个特定标示
.其后可以添加多个参数;每一个都是一个要被去除的标示.
</p>

<codesample lang="ebuild">
    # -fomit-frame-pointer leads to nasty broken code on sparc thanks to a
    # rather icky asm function
    use sparc &amp;&amp; filter-flags -fomit-frame-pointer
</codesample>

<p>
<c>filter-ldflags</c>基本等同于<c>LDFLAGS</c>.
</p>

<p>
如果软件对<c>CFLAGS</c>设置很敏感,<c>strip-flags</c>函数将会略去大部分的flags, 仅留下最少的最保守的flags.
</p>

<codesample lang="ebuild">
    # Our app hates screwy flags
    strip-flags
</codesample>

</body>
</section>

<section>
<title>标示替换</title>
<body>

<p>
替换标示可使用<c>replace-flags</c>.最常用的就是使用<c>-O2</c>替换<c>-Os</c>
(或替换<c>-O3</c>如果您喜欢的话).
</p>

<codesample lang="ebuild">
    # Seems to have issues with -Os, switch to -O2
    replace-flags -Os -O2
</codesample>

<p>
也有一个特别的函数叫<c>replace-cpu-flags</c>,它能替换CPU (<c>-mtune</c>, <c>-mcpu</c>, <c>-march</c>)的标示.函数的最后一个参数代表要使用的flag;在它之前的前的参数代表要替代的.
</p>

<codesample lang="ebuild">
    # Can't use ultrasparc or ultrasparc3 code, drop to v9
    replace-cpu-flags ultrasparc ultrasparc3 v9
</codesample>

</body>
</section>

<section>
<title>添加额外的标示</title>
<body>
<p>
有事需要添加额外的<c>CFLAGS</c>
或<c>LDFLAGS</c>.可以通过<c>append-flags</c>和<c>append-ldflags</c>
函数实现.
</p>

<codesample lang="ebuild">
    # If we're using selinux, we need to add a -D
    use selinux &amp;&amp; append-flags "-DWITH_SELINUX"

    # Secure linking needed, since we're setuid root
    append-ldflags -Wl,-z,now
</codesample>

<p>
详见<uri link="::eclass-reference/flag-o-matic.eclass/">flag-o-matic.eclass</uri>.
</p>
</body>
</section>

</chapter>
</guide>
